package org.inchain.network;

import java.net.InetSocketAddress;

import org.inchain.Configure;
import org.inchain.crypto.Sha256Hash;
import org.inchain.message.DefaultMessageSerializer;
import org.inchain.message.MessageSerializer;
import org.inchain.store.BlockStore;
import org.inchain.utils.Hex;
import org.inchain.utils.Utils;

/**
 * 测试网络
 * @author ln
 *
 */
public class TestNetworkParams extends NetworkParams {

	public TestNetworkParams() {
		seedManager = new RemoteSeedManager();

		seedManager.addDnsSeed("test1.seed.inchain.org");
		seedManager.addDnsSeed("test2.seed.inchain.org");

//    	seedManager.add(new Seed(new InetSocketAddress("47.93.16.125", Configure.DEFAULT_PORT)));
//    	seedManager.add(new Seed(new InetSocketAddress("119.23.249.26", Configure.DEFAULT_PORT)));
//   	seedManager.add(new Seed(new InetSocketAddress("119.23.253.3", Configure.DEFAULT_PORT)));
//    	seedManager.add(new Seed(new InetSocketAddress("119.23.254.99", Configure.DEFAULT_PORT)));
//		seedManager.add(new Seed(new InetSocketAddress("192.168.1.190", Configure.DEFAULT_PORT)));
//		seedManager.add(new Seed(new InetSocketAddress("192.168.1.186", Configure.DEFAULT_PORT)));
		init();
	}


	public TestNetworkParams(SeedManager seedManager) {
		this.seedManager = seedManager;
		init();
	}

	private void init() {

		id = ID_TESTNET;

		packetMagic = 629266579L;

		this.acceptableAddressCodes = new int[] {getSystemAccountVersion(), getCertAccountVersion()};
	}

	/**
	 * 测试网络的创世块
	 */
	@Override
	public BlockStore getGengsisBlock() {
		BlockStore gengsisBlock = new BlockStore(this, Hex.decode(""));

		Sha256Hash merkleHash = gengsisBlock.getBlock().buildMerkleHash();

		if(log.isDebugEnabled()) {
			log.debug("the gengsis block merkle hash is : {}", merkleHash);
		}
		Utils.checkState("5b90eb9c42ab12423aeba5d66d1c3ca7e77ae7f0390b30553af1dcd211a4ed51".equals(Hex.encode(merkleHash.getBytes())), "the gengsis block merkle hash is error");

		if(log.isDebugEnabled()) {
			log.debug("the gengsis block hash key is : {}", gengsisBlock.getBlock().getHash());
		}
		Utils.checkState("a7e0edac86b73dceeb3dee57be85711349486a5c56ba463595fdadca4f74e550".equals(Hex.encode(gengsisBlock.getBlock().getHash().getBytes())), "the gengsis block hash is error");

		return gengsisBlock;

	}

	@Override
	public int getProtocolVersionNum(ProtocolVersion version) {
		return version.getVersion();
	}

	@Override
	public MessageSerializer getSerializer(boolean parseRetain) {
		return new DefaultMessageSerializer(this);
	}

	/**
	 * 获取该网络的认证管理账号的hash160
	 * @return byte[]
	 */
	@Override
	public byte[] getCertAccountManagerHash160() {


		//return Hex.decode("8e168bb4963f0523b9ee1c734d3c142976581930");//root
		//return Hex.decode("b326aeb9c6710864441b7c6a282ce924b4c31749");//manager
		return Hex.decode("481e05c83604abf86cca029c4260674c45c85c58");//cer_manager_1
	}

	@Override
	public byte[] getCommunityManagerHash160() {
		return Hex.decode("481e05c83604abf86cca029c4260674c45c85c58");//cer_manager_1
	}

	/**
	 * 测试网络，普通地址以t开头
	 */
	@Override
	public int getSystemAccountVersion() {
		return 128;
	}

	/**
	 * 测试网络，认证地址以c开头
	 */
	@Override
	public int getCertAccountVersion() {
		return 88;
	}
}
