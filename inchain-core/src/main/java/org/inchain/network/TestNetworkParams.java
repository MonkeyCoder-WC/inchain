package org.inchain.network;

import java.net.InetSocketAddress;

import org.inchain.Configure;
import org.inchain.crypto.Sha256Hash;
import org.inchain.message.DefaultMessageSerializer;
import org.inchain.message.MessageSerializer;
import org.inchain.store.BlockStore;
import org.inchain.utils.Hex;
import org.inchain.utils.Utils;

/**
 * 测试网络
 * @author ln
 *
 */
public class TestNetworkParams extends NetworkParams {

	public TestNetworkParams() {
		seedManager = new RemoteSeedManager();

//		seedManager.addDnsSeed("test1.seed.inchain.org");
//		seedManager.addDnsSeed("test2.seed.inchain.org");

//    	seedManager.add(new Seed(new InetSocketAddress("47.93.16.125", Configure.DEFAULT_PORT)));
//    	seedManager.add(new Seed(new InetSocketAddress("119.23.249.26", Configure.DEFAULT_PORT)));
//   	seedManager.add(new Seed(new InetSocketAddress("119.23.253.3", Configure.DEFAULT_PORT)));
//    	seedManager.add(new Seed(new InetSocketAddress("119.23.254.99", Configure.DEFAULT_PORT)));
		seedManager.add(new Seed(new InetSocketAddress("192.168.1.190", Configure.DEFAULT_PORT)));
		seedManager.add(new Seed(new InetSocketAddress("192.168.1.186", Configure.DEFAULT_PORT)));
		init();
	}


	public TestNetworkParams(SeedManager seedManager) {
		this.seedManager = seedManager;
		init();
	}

	private void init() {

		id = ID_TESTNET;

		packetMagic = 629266579L;

		this.acceptableAddressCodes = new int[] {getSystemAccountVersion(), getCertAccountVersion()};
	}

	/**
	 * 测试网络的创世块
	 */
	@Override
	public BlockStore getGengsisBlock() {
		BlockStore gengsisBlock = new BlockStore(this, Hex.decode("0000000000000000000000000000000000000000000000000000000000000000000000007028bf144b66c484ed68dd598a0f46ad374bbdc95b7c2aef8e37f237c52f6a27a3ca6959000000000000a3ca6959822102883a9625a871e79c070e316edafc97eac2f6c97b218d0e55726f25be2a963e9276a9144237cccf6ff9a7674a8fc47c60278fdd23e9f3098846304402202f9db3b35c209d9f8835f826cc4fe91c9ea35a937e2ca950bb14e765c42d4bb702200f20cb8d846d1d5aca626240a2bb19564946b376bf26a9af9c0081af7a45fdb0ac130101000000010012117468697320612067656e6773697320747800000000010080faca73f91f00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca3ca6959000000000002010000000101d5f7b59176771b48e185a7121fdc732a1e20d6960e32c2327908d7d409a171f0000000006b4830450221009ebd931e4f17d847fdce5d5bb7f67d4aee0b2009fd09dae9aa07f2a26a6bcb6c022068049bd50215ec90a2bfccc52f5bb29e8621c6cded1f7ba3fb68efe33c1c77a701210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020080c6a47e8d03000078c2481976a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988ac00003426f56b1c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca4ca695900000000000601000000a4ca695900000000832102883a9625a871e79c070e316edafc97eac2f6c97b218d0e55726f25be2a963e9276a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988473045022100b975102499ff511f5919e73031e5f8190f0e6aa3ae6567932b18089490fb7cbe02201eca9772640c5d2004bed3c052130aaf1f8366db0013cd3d21db0667d248937cac4237cccf6ff9a7674a8fc47c60278fdd23e9f3090100000000000000000000000000000000000000000000000000000000000000000000000000000000020100000001010d6d5053d51dff011a9d65a949701193f2b79253c5dc5ce4b873305a4403962f010000006b483045022100ac8a7240fba45eb01847f15c95170144eefff188bde8955c88ce07aea774ffcb022056df178f37d0dee9a20ef90c418205d591d107cc527f49b9d875b0dca58cb17a01210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988ac00f08e510c6b1c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca4ca6959000000000003010000000000a4ca69590000000000832102883a9625a871e79c070e316edafc97eac2f6c97b218d0e55726f25be2a963e9276a9144237cccf6ff9a7674a8fc47c60278fdd23e9f30988473045022100d6b3d63d782d978989df3910b2b957184551abcf4c2de3ed7ad81f4e0d249fed02206922d979bc0bc547ad812017639e7d0d918394e3dc2cfd83818aefcdb37417dcac74913f454237cccf6ff9a7674a8fc47c60278fdd23e9f3090601000000a4ca695900000000832103a7db4a854e3f2ae3a30aa759bfd39045f6a80c967b3fd81036acebc54b557ece76a9142c1179b1e05fb8652644f6c61a033d284310091288473045022100b42dbf2d38a6d9bc02bc86d37fc8bce8c58de870f20af83dcac77b8618e787d2022070fd4b39396c321b000e583ef33d6d7ed1d6ac1d6c6edc03ef21e2c17a33ad19ac2c1179b1e05fb8652644f6c61a033d28431009120100000000000000000000000000000000000000000000000000000000000000000000000000000000020100000001015cd61f7d9580c8aa7e7c33a84ff842887a1728e69d5315d9e34ad8a0464b7f0e010000006b483045022100e3e47932fb681b05aba76a52bba4799abef73bfe4a845dde36d43ab56bc57c55022019f7284bbeea61b9990cd27d640a4df807b6f9c2356d77316c96e57c8728fed301210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a9142c1179b1e05fb8652644f6c61a033d284310091288ac00e0e97c236a1c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca4ca6959000000000003010000000000a4ca69590000000000832103a7db4a854e3f2ae3a30aa759bfd39045f6a80c967b3fd81036acebc54b557ece76a9142c1179b1e05fb8652644f6c61a033d284310091288473045022100ab7d5f9d1bc0c55fc067074ae146bae9b0b7fdd6386eb90671ba92d6b6032619022017c403d3d452cfb042ba1696476d565314cf8fd8072870a0497307ce2caf632eac85913f452c1179b1e05fb8652644f6c61a033d28431009120601000000a4ca6959000000008321033e371b2f3d42dd525833bcce12cb0d404fb73898bdea3e6794bd8ec552c9ba9c76a914b3fcd687a5c2b2617de0d504cfa7d12db93bb00c88473045022100e20691f8f7150343871355d6140c0bfd7d992328f3b1c63338dd170343de0e31022007645a56cf1dd95f5f95d453c31646ceb92af550e83e90181ab0dd3cb619f3c6acb3fcd687a5c2b2617de0d504cfa7d12db93bb00c01000000000000000000000000000000000000000000000000000000000000000000000000000000000201000000010122fe2f0b91ea38231a721af839978eebce5c511a0ded35d4a91748bfe3c5275a010000006a473044022044d31007419afcada5db0a36c28e9fa87dd52fd1f23b2cec6025e20c8859230c022049edd6cd0934da3eb854134e27c183b0b32edcd7856c69351060c07d8449989101210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a914b3fcd687a5c2b2617de0d504cfa7d12db93bb00c88ac00d044a83a691c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca4ca6959000000000003010000000000a4ca695900000000008321033e371b2f3d42dd525833bcce12cb0d404fb73898bdea3e6794bd8ec552c9ba9c76a914b3fcd687a5c2b2617de0d504cfa7d12db93bb00c88473045022100ac241da8035a0ba03a7bd6967e872c458cc59d7016a49969ead7de736a0ef43702205dfddfae422a52b9272f357dea44d5218f86c0370ff404a333e8aa99215c475dac89913f45b3fcd687a5c2b2617de0d504cfa7d12db93bb00c0601000000a4ca695900000000832103bf7759e9b81f8ff1b99732b3ee36aea0abff68c818b8839c318ad350e9642cb076a914c3bfdb8a67f35b6e4ea1ee3ae7b91eff58ec81a888473045022100b2c69d61c519058842eb34b8d900933f7b77197aff40b14f01effa10c7b1bc2f022044eca0b6e176a0b38c221abdfbca24402390fff5fe8dfb74e67f79ac29c4dc8cacc3bfdb8a67f35b6e4ea1ee3ae7b91eff58ec81a8010000000000000000000000000000000000000000000000000000000000000000000000000000000002010000000101bb84886f2d302f2f93d9c7d1a501c6184e48076030b24687b9f4c34fd09cb4ee010000006b483045022100e39679e7f5e84a4e10e58d0e4177ed3ececf6ba31dc7b6f5b037d6cb20c2a24e022042fbe6d5aa2bbfdb3e0122f3b8d1e43464d906f33b223052a011f87b61f35ee301210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a914c3bfdb8a67f35b6e4ea1ee3ae7b91eff58ec81a888ac00c09fd351681c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca4ca695900000000000601000000a4ca69590000000083210200d482122f8537ad2fa1af1914e088d6b308824a8ef4dc8b68fa0e0a88c484e376a9145f1a078b610d92a3110b2c1a7f880b0d2442e53088473045022100a3777fd21df43a0c5a2f0a6b5212e56008411560bb9158ea4acf86662ea1231802204e1135f613c97464054d3c58b26ab1d859b8bbdd9954fe6fa0ef1e47e3296bd4ac5f1a078b610d92a3110b2c1a7f880b0d2442e530010000000000000000000000000000000000000000000000000000000000000000000000000000000002010000000101d66a749f35c5fdb86d11ccc2e9b67e627da421cc03370a8803edf192d1290b90010000006a473044022011b4011a20b94b7493cb05a629ea222e7af4f2735a857ec766b3834118f7394202201f2afe6a29ccb92d308b96938cbce80d38fa17f81c3a9c3e4ed14e5d5a11a50001210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a9145f1a078b610d92a3110b2c1a7f880b0d2442e53088ac00b0fafe68671c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca4ca695900000000000601000000a4ca695900000000832103e8769d1901a4ef006054405c16716d6648fffe628385db5586c7fa18c3df5da876a914df639c6066a817a6be28b532839f8e1e85594cd488473045022100e8af47ce7f87a316b99cc62e62b31ede05e0477c016d1167cd3b74d8000111ea02206c3383b4d42119a85ffbd75377fe809237a6595b810c99cba0c6e66f834add13acdf639c6066a817a6be28b532839f8e1e85594cd4010000000000000000000000000000000000000000000000000000000000000000000000000000000002010000000101517c1a28eb51f0c9f41cc7c7f900df0bedca82db9c9e08f8b834f8872ca71839010000006a47304402201ee63a9190449ecaf27d301c27e8f55b82fb6171f24cc004ce6948699f364118022067524a613b2eea4b0cd619b566dfb9055cc31891256cf8359fcd43d126834a1e01210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a914df639c6066a817a6be28b532839f8e1e85594cd488ac00a0552a80661c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca4ca695900000000000601000000a4ca695900000000822103368f8061e02694e37da199c07c3e2f2506cdd748efee493f0d1c52ae7494428f76a914e3453a80144f6ac24baf01f20455c6167b9854858846304402202dad4e4f701f3f16d1c30575f50cc260b3344c4200732fd9847afec797541cc0022004600ce717d063f477ffe68e940eabea76c28da4d65ccbc4159cca78937c9869ace3453a80144f6ac24baf01f20455c6167b9854850100000000000000000000000000000000000000000000000000000000000000000000000000000000020100000001014a81bf8bd051bcf22bbef7e8594763ac8f82d4fed1112ef99b8257b250f4f5e2010000006b483045022100a13b93620fcb86846392844ccb5f7a47ea5252b682b22b22997c0cae82617aec02206da1c9dfa7543807230badc8ceda13f541506d4152b624ab27c14a45b5af902801210276c52ff14acd4c4d3e08f9596e0127a15e98207b3d0024426364825cd724c86dffffffff020010a5d4e8000000000000001976a914e3453a80144f6ac24baf01f20455c6167b98548588ac0090b05597651c00000000001976a914bb7e4d6ffb3266a0b533b21847bef4dacce95f4688aca4ca69590000000000"));

		Sha256Hash merkleHash = gengsisBlock.getBlock().buildMerkleHash();

		if(log.isDebugEnabled()) {
			log.debug("the gengsis block merkle hash is : {}", merkleHash);
		}
		Utils.checkState("7028bf144b66c484ed68dd598a0f46ad374bbdc95b7c2aef8e37f237c52f6a27".equals(Hex.encode(merkleHash.getBytes())), "the gengsis block merkle hash is error");

		if(log.isDebugEnabled()) {
			log.debug("the gengsis block hash key is : {}", gengsisBlock.getBlock().getHash());
		}
		Utils.checkState("0afd6be3b316ae61d4228f0183c87b0f8e534e730dcd51e4d6c8b76ef86fdfbc".equals(Hex.encode(gengsisBlock.getBlock().getHash().getBytes())), "the gengsis block hash is error");

		return gengsisBlock;

	}

	@Override
	public int getProtocolVersionNum(ProtocolVersion version) {
		return version.getVersion();
	}

	@Override
	public MessageSerializer getSerializer(boolean parseRetain) {
		return new DefaultMessageSerializer(this);
	}

	/**
	 * 获取该网络的认证管理账号的hash160
	 * @return byte[]
	 */
	@Override
	public byte[] getCertAccountManagerHash160() {


		//return Hex.decode("8e168bb4963f0523b9ee1c734d3c142976581930");//root
		//return Hex.decode("b326aeb9c6710864441b7c6a282ce924b4c31749");//manager
		return Hex.decode("481e05c83604abf86cca029c4260674c45c85c58");//cer_manager_1
	}

	@Override
	public byte[] getCommunityManagerHash160() {
		return Hex.decode("481e05c83604abf86cca029c4260674c45c85c58");//cer_manager_1
	}

	/**
	 * 测试网络，普通地址以t开头
	 */
	@Override
	public int getSystemAccountVersion() {
		return 128;
	}

	/**
	 * 测试网络，认证地址以c开头
	 */
	@Override
	public int getCertAccountVersion() {
		return 88;
	}
}
